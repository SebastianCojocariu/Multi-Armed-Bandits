from contextual_bandit import *

class ContextualExploreExploit(ContextualBandit):
	def __init__(self, policy_args, model_args):
		super().__init__(policy_args=policy_args, model_args=model_args)
		self.breakpoint = policy_args["breakpoint"]
		self.policy_name = "ContextualExploreExploit" + "(breakpoint: {}, p: {}, oracle: {})".format(self.breakpoint, self.p, model_args["class_model_name"])


	def compute_score(self, arm, context, normalising_factor):
		score = self.oracles[arm]["model"].predict(context)	
		score = self.augment_prediction(arm=arm, prediction=score, normalising_factor=normalising_factor)
		return score


	def choose_arm(self, event):
		if self.current_event_count < self.breakpoint:
			return random.choice(event["available_arms"])
		return ContextualBandit.choose_arm(event=event)
